--- /dev/null
+++ rtmidi.pc.in
@@ -0,0 +1,14 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: rtmidi
+Description: Library for realtime MIDI input/output
+Version: @VERSION@
+URL: http://www.music.mcgill.ca/~gary/rtmidi/index.html
+Requires: @pc_requires@
+Conflicts:
+Libs: -L${libdir} -l@SONAME@
+Libs.private:
+Cflags: @api@
--- RtMidi.cpp~	2014-03-31 17:05:38.000000000 +0200
+++ RtMidi.cpp	2014-06-23 19:19:44.484986955 +0200
@@ -114,9 +114,9 @@
     rtapi_ = new MidiInDummy( clientName, queueSizeLimit );
 #endif
 }
 
-RtMidiIn :: RtMidiIn( RtMidi::Api api, const std::string clientName, unsigned int queueSizeLimit )
+extern RTMIDI_DLL_PUBLIC RtMidiIn :: RtMidiIn( RtMidi::Api api, const std::string clientName, unsigned int queueSizeLimit )
   : RtMidi()
 {
   if ( api != UNSPECIFIED ) {
     // Attempt to open the specified API.
@@ -183,9 +183,9 @@
     rtapi_ = new MidiOutDummy( clientName );
 #endif
 }
 
-RtMidiOut :: RtMidiOut( RtMidi::Api api, const std::string clientName )
+extern RTMIDI_DLL_PUBLIC RtMidiOut :: RtMidiOut( RtMidi::Api api, const std::string clientName )
 {
   if ( api != UNSPECIFIED ) {
     // Attempt to open the specified API.
     openMidiApi( api, clientName );
--- RtMidi.h~	2014-03-31 17:05:38.000000000 +0200
+++ RtMidi.h	2014-06-23 19:22:50.530409908 +0200
@@ -44,8 +44,18 @@
 #define RTMIDI_H
 
 #define RTMIDI_VERSION "2.1.0"
 
+#if defined _WIN32 || defined __CYGWIN__
+  #define RTMIDI_DLL_PUBLIC
+#else
+  #if __GNUC__ >= 4
+    #define RTMIDI_DLL_PUBLIC __attribute__( (visibility( "default" )) )
+  #else
+    #define RTMIDI_DLL_PUBLIC
+  #endif
+#endif
+
 #include <exception>
 #include <iostream>
 #include <string>
 #include <vector>
@@ -202,9 +212,9 @@
 // make a "logical" API selection.
 //
 // **************************************************************** //
 
-class RtMidiIn : public RtMidi
+class RTMIDI_DLL_PUBLIC RtMidiIn : public RtMidi
 {
  public:
 
   //! User callback function type definition.
@@ -344,9 +354,9 @@
     by Gary P. Scavone, 2003-2014.
 */
 /**********************************************************************/
 
-class RtMidiOut : public RtMidi
+class RTMIDI_DLL_PUBLIC RtMidiOut : public RtMidi
 {
  public:
 
   //! Default constructor that allows an optional client name.
--- Makefile.in~	2014-03-31 17:05:38.000000000 +0200
+++ Makefile.in	2014-06-23 19:24:17.789326879 +0200
@@ -10,30 +10,28 @@
 STATIC = $(LIBNAME).a
 SHARED = @sharedlib@
 RELEASE = 2.1.0
 MAJOR = 2
-LIBRARIES = $(STATIC) $(SHARED)
+LIBRARIES = $(SHARED)
 
 CC       = @CXX@
 AR       = @AR@
 RANLIB   = @RANLIB@
 
 DEFS     = @CPPFLAGS@
-CFLAGS   = @CXXFLAGS@ -Iinclude -fPIC
+CFLAGS   += @CXXFLAGS@ -Iinclude -fPIC
 
 PREFIX   = @prefix@
 
 all : $(LIBRARIES)
 
-tests:
+check:
 	cd tests && $(MAKE) all
 
 $(LIBRARIES): $(OBJECTS)
-	$(AR) ruv $(STATIC) $(OBJECTS)
-	ranlib $(STATIC)
 	$(CC) -fPIC @libflags@ $(OBJECTS) @LIBS@
-	$(LN) -sf @sharedname@ $(SHARED)
-	$(LN) -sf @sharedname@ $(SHARED).$(MAJOR)
+	$(LN) -s @sharedname@.$(RELEASE) $(SHARED)
+	$(LN) -s @sharedname@.$(RELEASE) $(SHARED).$(MAJOR)
 
 #	$(CC) -shared $(OBJECTS) -o $(SHARED) @LIBS@
 
 %.o : %.cpp
--- configure.ac~	2014-03-31 17:05:38.000000000 +0200
+++ configure.ac	2014-06-23 19:31:39.876723182 +0200
@@ -49,10 +49,10 @@
 # Checks for package options and external software
 AC_CANONICAL_HOST
 
 AC_SUBST( sharedlib, ["librtmidi.so"] )
-AC_SUBST( sharedname, ["librtmidi.so.\$(RELEASE)"] )
-AC_SUBST( libflags, ["-shared -Wl,-soname,\$(SHARED).\$(MAJOR) -o \$(SHARED).\$(RELEASE)"] )
+AC_SUBST( sharedname, ["librtmidi.so.\$(MAJOR)"] )
+AC_SUBST( libflags, ["-shared -Wl,-soname,\$(SHARED).\$(MAJOR) -o \$(SHARED).\$(MAJOR).\$(RELEASE)"] )
 case $host in
   *-apple*)
   AC_SUBST( sharedlib, ["librtmidi.dylib"] )
   AC_SUBST( sharedname, ["librtmidi.\$(RELEASE).dylib"] )
@@ -60,15 +60,21 @@
 esac
 
 AC_SUBST( api, [""] )
 AC_SUBST( req, [""] )
+AC_SUBST( pc_requires, [""] )
 AC_MSG_CHECKING(for MIDI API)
 case $host in
   *-*-linux*)
   AC_ARG_WITH(jack, [  --with-jack = choose JACK server support (mac and linux only)], [
   api="$api -D__UNIX_JACK__"
+  pc_requires="$pc_requires"
   AC_MSG_RESULT(using JACK)
-  AC_CHECK_LIB(jack, jack_client_open, , AC_MSG_ERROR(JACK support requires the jack library!))], )
+  AC_CHECK_LIB(jack, jack_client_open, , AC_MSG_ERROR(JACK support requires the jack library!))
+  AC_SUBST(PC_FILE, [rtmidi.pc])
+  AC_SUBST(pc_requires, [jack])
+  AC_SUBST(SONAME, [rtmidi])
+  AC_CONFIG_FILES($PC_FILE:rtmidi.pc.in)] , )
 
   # Look for ALSA flag
   AC_ARG_WITH(alsa, [  --with-alsa = choose native ALSA sequencer API support (linux only)], [
     api="$api -D__LINUX_ALSA__"
